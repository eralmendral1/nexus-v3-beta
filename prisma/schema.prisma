generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Client {
    id                Int                 @id
    masterClient      Int?
    name              String
    email             String?
    disabled          Boolean             @default(false)
    address1          String?
    address2          String?
    city              String?
    state             String?
    zip               String?
    phone1            String?
    phone2            String?
    fax               String?
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    PolicyCategory    PolicyCategory[]
    DestinationNumber DestinationNumber[]

    @@map("clients")
}

model DestinationNumber {
    id Int @id @default(autoincrement())

    client_id Int
    client    Client @relation(fields: [client_id], references: [id])

    number    String
    extension String?
    label     String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("destination_numbers")
}

model PolicyCategory {
    id        Int    @id @default(autoincrement())
    name      String
    client_id Int
    client    Client @relation(fields: [client_id], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Policy    Policy[]

    @@map("policy_categories")
}

model Policy {
    id          Int            @id @default(autoincrement())
    name        String
    category_id Int
    category    PolicyCategory @relation(fields: [category_id], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("policies")
}

model User {
    id                      Int       @id @default(autoincrement())
    callcenter_id           Int?
    sid                     String?
    name                    String
    email                   String
    email_verified_at       DateTime?
    avatar                  String?
    password                String?
    admin                   Boolean   @default(false)
    external_agent          Boolean   @default(false)
    skills                  String?
    timezone                String?
    block_reject            Boolean   @default(true)
    presence                String?
    reservation_passthrough String?
    remember_token          String?
    createdAt               DateTime  @default(now())
    updatedAt               DateTime  @updatedAt
    deletedAt               DateTime?

    capabilities WorkerCapability[]

    trackers         UsersOnTrackers[]
    trackerHistories TrackerHistory[]

    @@map("users")
}

model Item {
    id Int @id @default(autoincrement())

    client_id              Int
    internal_name          String
    external_name          String
    self_init              Boolean   @default(false)
    channel_name           String
    channel_id             String
    self_init_workflow     String?
    workflow_id            String
    workflow_name          String?
    template               String
    icon_class             String?
    background_color       String?
    notification_tone      String?
    priority               Int?
    exclude                Boolean?
    timeout                Int?
    auto_dial              Boolean   @default(true)
    passthrough_url        String?
    pending_warning_limit  Int?
    pending_danger_limit   Int?
    accepted_warning_limit Int?
    accepted_danger_limit  Int?
    wrapup_time            Int?
    createdBy              String?
    createdAt              DateTime  @default(now())
    updatedAt              DateTime  @updatedAt
    deletedAt              DateTime?

    workerCapability WorkerCapability[]

    @@map("items")
}

model Contact {
    id Int @id @default(autoincrement())

    number String
    notes  String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("contacts")
}

model WorkerCapability {
    id        Int      @id @default(autoincrement())
    worker_id Int
    item_id   Int
    status    String
    view_only Boolean  @default(false)
    BillType  String?
    BillRate  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [worker_id], references: [id])
    item Item @relation(fields: [item_id], references: [id])

    @@map("worker_capabilities")
}

model Tracker {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    color       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    users UsersOnTrackers[]

    @@map("trackers")
}

model TrackerHistory {
    id Int @id @default(autoincrement())
    user    User   @relation(fields: [user_id], references: [id])
    user_id Int
    type    String
    worker_id Int?
    meta_data String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("tracker_histories")
}

model UsersOnTrackers {
    tracker    Tracker @relation(fields: [tracker_id], references: [id])
    tracker_id Int

    user    User @relation(fields: [user_id], references: [id])
    user_id Int

    assignedAt DateTime @default(now())

    @@id([tracker_id, user_id])
    @@map("tracker_user")
}
